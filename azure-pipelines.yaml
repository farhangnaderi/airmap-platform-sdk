name: "build-n-test"
trigger:
  branches:
    include:
      - "master"
  tags:
    include:
       - "*"

variables:
  artifactDir: $(System.DefaultWorkingDirectory)/artifacts
  ubuntuArtifact: 'airmap-platform-sdk-ubuntu-artifact'
  l4tArtifact: 'airmap-platform-sdk-l4t-artifact'

jobs:
  - job: "ubuntu_release"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    timeoutInMinutes: 0
    pool:
      vmImage: "ubuntu-20.04"
    steps:
      - checkout: self
        clean: true
        lfs: true
        submodules: recursive
        persistCredentials: true
      - task: Docker@2
        displayName: ubuntu
        inputs:
          command: buildAndPush
          Dockerfile: docker/ubuntu
          buildContext: "."
          containerRegistry: airmapreg.acr
          repository: platform-sdk.ubuntu
          tags: |
            $(Build.SourceVersion)
      - bash: |
          chmod +x ./docker/extract_artifacts.sh
          ./docker/extract_artifacts.sh airmapreg.azurecr.io/platform-sdk.ubuntu:"$(Build.SourceVersion)" "$(artifactDir)"
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(artifactDir)
          artifactName: "$(ubuntuArtifact)"
  - job: "l4t_release"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    dependsOn: []
    timeoutInMinutes: 0
    pool:
      vmImage: "ubuntu-20.04"
    steps:
      - checkout: self
        clean: true
        lfs: true
        submodules: recursive
        persistCredentials: true
      - bash: |
          sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --platform=linux/amd64 --rm --privileged multiarch/qemu-user-static --reset -p yes
      - task: Docker@2
        displayName: "L4T Build"
        inputs:
          command: build
          Dockerfile: docker/l4t/l4t
          buildContext: "."
          containerRegistry: airmapreg.acr
          repository: platform-sdk.l4t
          tags: $(Build.sourceVersion)
      - bash:  |
          chmod +x ./docker/extract_artifacts.sh
          ./docker/extract_artifacts.sh airmapreg.azurecr.io/platform-sdk.l4t:"$(Build.SourceVersion)" "$(artifactDir)"
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(artifactDir)
          artifactName: "$(l4tArtifact)"
  - job: "github_release"
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    pool:
      vmImage: "ubuntu-20.04"
    dependsOn:
      - "l4t_release"
      - "ubuntu_release"
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Ubuntu Artifact'
        inputs:
          artifact: "$(ubuntuArtifact)"
          path: $(Build.ArtifactStagingDirectory)
      - task: DownloadPipelineArtifact@2
        displayName: 'Download L4T Artifact'
        inputs:
          artifact: "$(l4tArtifact)"
          path: $(Build.ArtifactStagingDirectory)
      - bash: |
          set -eox pipefail
          curl -fsSL https://github.com/cli/cli/releases/download/v2.0.0/gh_2.0.0_linux_amd64.tar.gz | tar -xzf - --no-anchored gh --strip-components 2
          chmod a+x gh
          ./gh config set prompt disabled
            # auth token supplied via ENV configured in pipeline variables setup
          ./gh auth login
            # assume release version is most recent existing tag in repo
          VERSION="$(git describe --abbrev=0 --tags)"
          ./gh release create --repo=airmap/platform-sdk "$VERSION" "$(Build.ArtifactStagingDirectory)"/airmap-platform-sdk-*.deb
        displayName: "Create GitHub release"
        env:
          GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: "pr"
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
    timeoutInMinutes: 0
    pool:
      vmImage: "ubuntu-20.04"
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: recursive
      persistCredentials: true
    - bash: |
        sudo apt-get install qemu binfmt-support qemu-user-static
        docker run --platform=linux/amd64 --rm --privileged multiarch/qemu-user-static --reset -p yes
      displayName: "Configure QEMU for L4T build"
    - task: Docker@2
      displayName: "L4T Build"
      inputs:
        command: build
        Dockerfile: docker/l4t/l4t
        buildContext: "."
        containerRegistry: airmapreg.acr
        repository: platform-sdk.l4t
        tags: $(Build.sourceVersion)
    - task: Docker@2
      displayName: ubuntu
      inputs:
        command: build
        Dockerfile: docker/ubuntu
        buildContext: "."
        containerRegistry: airmapreg.acr
        repository: platform-sdk.ubuntu
        tags: $(Build.SourceVersion)
    # CentOS build disabled
    # To be replaced by RHEL build in PATH-173
    # - task: Docker@2
    #   displayName: centos
    #   inputs:
    #     command: build
    #     Dockerfile: docker/centos
    #     buildContext: "."
    - task: Docker@2
      displayName: android
      inputs:
        command: build
        Dockerfile: docker/android
        buildContext: "."
